import pyembroidery
import os
import numpy as np
from xml.dom import minidom
from svgpathtools import parse_path, Line, Path, wsvg, svg2paths, disvg, CubicBezier
from svgpathtools.path import scale
# import shapely.geometry
# from itertools import compress
import sys

# import utils

# from euclid import Vector3


# fixGcode("gcode2")

def offset_curve(path, offset_distance, steps=1000):
    """Takes in a Path object, `path`, and a distance,
    `offset_distance`, and outputs an piecewise-linear approximation
    of the 'parallel' offset curve."""
    nls = []
    for seg in path:
        for k in range(steps):
            t = k / float(steps)
            offset_vector = offset_distance * seg.normal(t)
            nl = Line(seg.point(t), seg.point(t) + offset_vector)
            nls.append(nl)
    connect_the_dots = [Line(nls[k].end, nls[k+1].end) for k in range(len(nls)-1)]
    if path.isclosed():
        connect_the_dots.append(Line(nls[-1].end, nls[0].end))
    offset_path = Path(*connect_the_dots)
    return offset_path

# Examples:
# path1 = Path(CubicBezier(300+100j, 100+100j, 200+200j, 200+300j))
# path = parse_path("m 18.886226,219.46551 c -0.165745,-0.44537 -0.227345,-8.5291 -0.136888,-17.96384 l 0.164465,-17.15408 6.143324,-0.18359 c 3.961603,-0.11839 6.311846,-0.45703 6.617852,-0.95353 0.6199,-1.00582 0.6199,-53.29611 0,-54.30193 -0.306006,-0.49651 -2.656249,-0.83514 -6.617852,-0.95353 l -6.143324,-0.18359 V 109.97218 92.172932 l 25.204598,-0.16613 c 17.35217,-0.11436 25.454312,0.0476 26.006127,0.5198 0.44084,0.37726 8.470348,11.662388 17.843354,25.078058 9.709882,13.89785 17.352888,24.26112 17.764828,24.08761 0.39765,-0.16749 7.93596,-10.64084 16.75181,-23.27411 8.81584,-12.63328 16.68023,-23.781278 17.47642,-24.773338 l 1.44762,-1.80374 25.36979,0.16593 25.36979,0.16592 0.16385,17.625698 0.16385,17.62569 -1.39683,0.33198 c -0.76826,0.18258 -3.75492,0.40371 -6.63702,0.49139 l -5.24019,0.15942 v 27.65239 27.6524 l 5.24019,0.15942 c 2.8821,0.0877 5.86876,0.3088 6.63702,0.49139 l 1.39683,0.33197 -0.16385,17.6257 -0.16385,17.62569 H 159.7823 127.41646 v -17.79924 -17.79924 l 6.78141,-0.31785 6.78142,-0.31784 v -17.00463 c 0,-10.82863 -0.22391,-17.0504 -0.6165,-17.13065 -0.33907,-0.0693 -8.14914,10.44338 -17.35571,23.36151 -9.67302,13.57262 -17.1474,23.48752 -17.70615,23.48752 -0.56259,0 -7.870373,-9.81199 -17.476105,-23.46476 -9.080049,-12.90562 -16.786603,-23.41829 -17.125674,-23.36151 -0.393135,0.0658 -0.616492,6.26408 -0.616492,17.10789 v 17.00463 l 6.781415,0.31784 6.781414,0.31785 v 17.79924 17.79924 l -32.228954,0.1646 c -25.652661,0.13102 -32.290446,-6.3e-4 -32.530308,-0.64516 z")

def toolPathSVG(svgPath, repetitions):
    paths, attributes = svg2paths(svgPath)

    offset_distances = []
    mult = 3
    for k in range(1, 1 + repetitions,2):
        if k > 1:
            mult = 2
        offset_distances.append(-mult * k)
    # offset_distances = [-3*k for k in range(1, 1 + repetitions,2)]
    offset_paths = []

    for path in paths:
        for distances in offset_distances:
            newcurve = offset_curve(path, distances)
            # if newcurve.length() < 230 : 
            #     break
            offset_paths.append(newcurve)

    shownPath = paths + offset_paths

    wsvg(shownPath, filename=svgPath)




# experimental method, uses scanline algorithm doesnt work always
def fillSvg(svg_path, svg_d, width=750, height=750):
    p = parse_path(svg_d)

    intersections = []
    for i in range(height, 0, -5):
        newline = Line(complex(0,i), complex(100000,i))
        intersect = p.intersect(newline)
        # print(intersect)
        indiv_sections = []
        if(intersect):
            for (T1, seg1, t1), (T2, seg2, t2) in intersect:
                point = p.point(T1)
                if point:
                    point_tuple = (point.real, point.imag)
                    # print(point_tuple)
                    indiv_sections.append(point_tuple)
            # p.append(newline)

            print(indiv_sections)

            pairs = list(zip(indiv_sections, indiv_sections[1:] + indiv_sections[:1])) 

            del pairs[1::2]

            for pair in pairs:
                x0 = pair[0][0]
                x1 = pair[1][0]
                y  = pair[0][1]
                # print("( "+ x0 + ", " + y + "), (" + x1 + ", " + y + ")")
                betweenLine = Line(complex(x0,y), complex(x1,y))
                p.append(betweenLine)

    disvg(p)

def writeGcode(gcode_file, svg_path, repetitions, fill):
    gcodeString = ""

    returnString = ""

    if fill:
        try:
            toolPathSVG(svg_path, repetitions)
        except:
            returnString = "Couldn't fill svg. Try breaking it into multiple paths."
            # print(returnString)
    # print(returnString)

    doc = minidom.parse(svg_path)
    path_strings = [path.getAttribute('d') for path
                    in doc.getElementsByTagName('path')]
    doc.unlink()

    # try :
    #     fillSvg(svg_path, path_strings[0])

    #     doc = minidom.parse(svg_path)
    #     path_strings = [path.getAttribute('d') for path
    #                     in doc.getElementsByTagName('path')]
    #     doc.unlink()
    # except :
    #     print("filling failed")
    
    vertices = []

    # print the line draw commands
    for path_string in path_strings:
        p = parse_path(path_string)
        for i in range(0,int(p.length()),2):
            div = (i/p.length())
            point = p.point(div)
            x = point.real
            y = point.imag
            v = (x,y)
            vertices.append(v)
            gcodeString += ("G00 X" + str(x) + " Y" + str(y)) + "\n"
        if(len(path_strings) > 1):
            gcodeString += "M00\n"


    gcodeString += "\nM30"

    f = open(gcode_file, "w")
    f.write(gcodeString)
    f.close()

    return returnString

# p = parse_path("m 81.691248,195.96877 c -8.088856,-1.27474 -14.441194,-7.42993 -15.767069,-15.27772 -0.362903,-2.148 -0.365962,-2.6208 -0.02938,-4.53993 0.735535,-4.19385 2.455515,-7.30833 5.957581,-10.78775 9.90686,-9.8428 27.579294,-12.59291 48.52611,-7.5514 3.60269,0.86709 3.87797,0.97426 3.73623,1.4545 -0.0842,0.28514 -0.29127,1.07343 -0.46024,1.75176 l -0.30724,1.23332 -1.397,-0.16785 c -0.76835,-0.0923 -2.3114,-0.27509 -3.429,-0.40615 -1.1176,-0.13107 -3.6322,-0.24366 -5.588,-0.25021 -11.01062,-0.0369 -18.419875,3.88212 -22.442574,11.87057 -1.326653,2.63452 -1.90384,5.15097 -1.910842,8.33099 -0.0094,4.29547 0.9908,7.44714 3.571608,11.25365 0.894435,1.31922 1.592849,2.42689 1.552031,2.46148 -0.65314,0.5535 -9.533554,1.01536 -12.012215,0.62474 z m 21.644632,-8.08474 c -2.4326,-2.60065 -3.773416,-6.79861 -3.24965,-10.17435 0.48819,-3.14647 1.97492,-6.08954 4.18036,-8.27525 3.22444,-3.19561 8.50666,-4.70729 15.28251,-4.37358 3.12105,0.15371 3.92504,0.41455 3.92534,1.27349 2.6e-4,0.99714 1.41427,3.58333 2.48869,4.55206 1.60707,1.44898 2.97943,2.04369 5.02427,2.17727 2.93826,0.19195 6.33915,-1.07718 8.72111,-3.2545 0.61194,-0.55937 1.1458,-0.98387 1.18634,-0.94332 0.0405,0.0405 -0.2664,1.03487 -0.68211,2.20961 l -0.75583,2.13589 1.31909,1.33568 c 1.3191,1.33569 1.3191,1.33569 0.8529,2.04978 -0.81608,1.25003 -5.50767,5.78254 -7.61366,7.35551 -2.31453,1.72873 -5.26298,3.5814 -7.08236,4.45025 -1.22191,0.58352 -1.24458,0.58491 -1.524,0.0936 -0.81932,-1.44068 -3.14501,-3.50656 -4.95407,-4.40065 -1.89408,-0.9361 -1.92919,-0.9426 -5.0954,-0.9426 -2.93492,0 -3.30471,0.0546 -4.65532,0.68749 -2.19232,1.02731 -3.59565,2.13562 -4.80251,3.7929 -0.59622,0.81873 -1.15689,1.48861 -1.24592,1.48861 -0.089,0 -0.68294,-0.55704 -1.31978,-1.23787 z M 55.148248,150.17567 v -23.19823 l 5.837014,-1.82916 5.837015,-1.82917 2.481485,2.19202 c 6.171225,5.45133 12.25632,8.30034 16.832486,7.88087 6.333663,-0.58056 10.474112,-4.46381 11.241466,-10.54315 l 0.291191,-2.30695 h 7.618995 c 4.19044,0 8.59646,0.12756 9.79116,0.28347 4.30075,0.56124 8.0623,1.2762 10.68118,2.03016 2.76179,0.79511 7.36576,2.51837 7.36632,2.7572 1.8e-4,0.0749 -1.45715,0.13617 -3.2385,0.13617 -3.14042,0 -3.24123,0.0169 -3.31809,0.55703 -0.0667,0.46853 0.0746,0.58217 0.889,0.71524 3.04374,0.49733 6.81364,1.23633 8.58827,1.68353 8.16636,2.05789 16.95876,5.82717 22.4597,9.62841 1.95513,1.35103 1.95224,1.33211 0.75237,4.93074 -1.22845,3.68431 -3.59608,8.15737 -5.89656,11.14008 -0.74738,0.96903 -0.74738,0.96903 -2.30044,0.80527 l -1.55307,-0.16375 -1.24437,1.91065 c -0.6844,1.05086 -1.68055,2.33658 -2.21366,2.85715 l -0.96929,0.94648 0.01,-1.91432 c 0.0169,-3.22827 -0.82459,-5.35405 -2.84003,-7.17488 -2.78613,-2.5171 -6.47491,-2.7826 -10.58861,-0.76212 -1.76996,0.86933 -4.49937,3.19342 -5.4725,4.65982 l -0.40436,0.60933 -3.25159,-0.92971 c -8.44804,-2.41549 -12.98152,-3.06088 -21.53958,-3.0664 -4.831747,-0.003 -7.048395,0.1037 -9.270999,0.44673 -11.414184,1.76163 -20.056998,5.22493 -27.613875,11.06527 -2.715486,2.09866 -5.903595,5.47386 -7.452058,7.88937 -0.621,0.9687 -1.214805,1.76798 -1.31958,1.77618 -0.104775,0.008 -0.1905,-10.4243 -0.1905,-23.18333 z m 29.21,-20.14953 c -3.686769,-0.39865 -7.993842,-2.22681 -10.791027,-4.58032 -1.652377,-1.39029 -4.194973,-4.23948 -4.194973,-4.70082 0,-0.11171 5.715,-0.2031 12.7,-0.2031 h 12.7 l -0.0015,1.3335 c -7.62e-4,0.73343 -0.118156,1.75382 -0.26084,2.26754 -0.342108,1.23172 -1.674922,3.17024 -2.794221,4.06405 -1.593926,1.27291 -4.884588,2.08653 -7.357415,1.81915 z")

def createEmbroidery(filename, ext, repetitions, fill):
    input_file = "uploads/" + filename

    gcode_file = "tempF/"+filename+".gcode"

    output_file = "outF/"+filename+ext

    returned = writeGcode(gcode_file, input_file, repetitions, fill)

    pyembroidery.convert(gcode_file, output_file)

    return returned

def cleanup(filename):
    os.remove("tempF/"+filename+".gcode")
    os.remove("uploads/" + filename)


# fillSvg("", "m 75.650802,227.4614 c -7.490789,-1.3677 -14.686005,-7.78514 -24.395288,-21.75821 -5.225545,-7.52032 -8.863199,-14.72712 -12.564754,-24.89287 -4.912927,-13.49259 -6.917463,-28.62304 -5.432706,-41.00661 1.533173,-12.78741 6.64857,-23.55632 14.918041,-31.40541 6.327569,-6.0059 14.222861,-9.9053 22.783965,-11.25275 6.639748,-1.04505 11.714321,-0.34388 20.481468,2.82997 5.212448,1.88699 9.731612,3.40742 11.404602,3.83698 2.04457,0.52497 3.42533,0.54753 5.15738,0.0843 1.69155,-0.45242 6.40485,-2.0404 11.14474,-3.75481 7.94329,-2.87308 12.41556,-3.8404 17.81024,-3.85223 4.13979,-0.009 8.11174,0.53841 12.37549,1.70583 9.37248,2.5662 15.76683,6.82902 21.70508,14.46979 l 0.74854,0.96315 -1.86748,1.25708 c -9.85607,6.63454 -15.40671,15.19713 -16.89582,26.06402 -0.32251,2.35352 -0.32114,7.54102 0.003,10.25832 1.04167,8.7403 4.61778,16.05222 10.81343,22.10975 3.48474,3.40705 6.35746,5.50275 10.19816,7.43971 l 2.32141,1.17075 -0.5466,1.53688 c -4.09934,11.52623 -9.09609,20.37265 -17.49499,30.97377 -5.36384,6.77025 -10.07681,10.53548 -15.37916,12.2865 -5.11991,1.69078 -10.51673,1.10707 -18.69211,-2.02169 -6.06606,-2.32151 -8.79055,-3.06482 -13.08428,-3.56964 -4.90522,-0.57673 -10.77298,0.30738 -16.826867,2.53534 -1.3232,0.48697 -3.488437,1.28384 -4.811637,1.77081 -5.612169,2.06539 -10.468686,2.84298 -13.873561,2.2213 z M 104.79163,96.05453 c -0.20337,-0.33252 -0.26453,-4.286382 -0.0924,-5.970559 0.82805,-8.099955 4.76487,-16.331496 10.90799,-22.807683 4.75745,-5.015379 11.89427,-9.131718 18.98132,-10.947947 1.89802,-0.486416 5.54983,-1.026507 5.72741,-0.847066 0.0493,0.04982 0.0865,1.505782 0.0827,3.235463 -0.008,3.548507 -0.22579,5.399645 -1.00327,8.522471 -1.64246,6.597063 -5.48747,13.130434 -10.97294,18.644994 -5.50086,5.530039 -11.29938,8.816763 -17.55396,9.949957 -1.67357,0.30321 -5.93175,0.45763 -6.07685,0.22037 z")







# width = 1000
# height = 1000

# p = parse_path("m 81.691248,195.96877 c -8.088856,-1.27474 -14.441194,-7.42993 -15.767069,-15.27772 -0.362903,-2.148 -0.365962,-2.6208 -0.02938,-4.53993 0.735535,-4.19385 2.455515,-7.30833 5.957581,-10.78775 9.90686,-9.8428 27.579294,-12.59291 48.52611,-7.5514 3.60269,0.86709 3.87797,0.97426 3.73623,1.4545 -0.0842,0.28514 -0.29127,1.07343 -0.46024,1.75176 l -0.30724,1.23332 -1.397,-0.16785 c -0.76835,-0.0923 -2.3114,-0.27509 -3.429,-0.40615 -1.1176,-0.13107 -3.6322,-0.24366 -5.588,-0.25021 -11.01062,-0.0369 -18.419875,3.88212 -22.442574,11.87057 -1.326653,2.63452 -1.90384,5.15097 -1.910842,8.33099 -0.0094,4.29547 0.9908,7.44714 3.571608,11.25365 0.894435,1.31922 1.592849,2.42689 1.552031,2.46148 -0.65314,0.5535 -9.533554,1.01536 -12.012215,0.62474 z m 21.644632,-8.08474 c -2.4326,-2.60065 -3.773416,-6.79861 -3.24965,-10.17435 0.48819,-3.14647 1.97492,-6.08954 4.18036,-8.27525 3.22444,-3.19561 8.50666,-4.70729 15.28251,-4.37358 3.12105,0.15371 3.92504,0.41455 3.92534,1.27349 2.6e-4,0.99714 1.41427,3.58333 2.48869,4.55206 1.60707,1.44898 2.97943,2.04369 5.02427,2.17727 2.93826,0.19195 6.33915,-1.07718 8.72111,-3.2545 0.61194,-0.55937 1.1458,-0.98387 1.18634,-0.94332 0.0405,0.0405 -0.2664,1.03487 -0.68211,2.20961 l -0.75583,2.13589 1.31909,1.33568 c 1.3191,1.33569 1.3191,1.33569 0.8529,2.04978 -0.81608,1.25003 -5.50767,5.78254 -7.61366,7.35551 -2.31453,1.72873 -5.26298,3.5814 -7.08236,4.45025 -1.22191,0.58352 -1.24458,0.58491 -1.524,0.0936 -0.81932,-1.44068 -3.14501,-3.50656 -4.95407,-4.40065 -1.89408,-0.9361 -1.92919,-0.9426 -5.0954,-0.9426 -2.93492,0 -3.30471,0.0546 -4.65532,0.68749 -2.19232,1.02731 -3.59565,2.13562 -4.80251,3.7929 -0.59622,0.81873 -1.15689,1.48861 -1.24592,1.48861 -0.089,0 -0.68294,-0.55704 -1.31978,-1.23787 z M 55.148248,150.17567 v -23.19823 l 5.837014,-1.82916 5.837015,-1.82917 2.481485,2.19202 c 6.171225,5.45133 12.25632,8.30034 16.832486,7.88087 6.333663,-0.58056 10.474112,-4.46381 11.241466,-10.54315 l 0.291191,-2.30695 h 7.618995 c 4.19044,0 8.59646,0.12756 9.79116,0.28347 4.30075,0.56124 8.0623,1.2762 10.68118,2.03016 2.76179,0.79511 7.36576,2.51837 7.36632,2.7572 1.8e-4,0.0749 -1.45715,0.13617 -3.2385,0.13617 -3.14042,0 -3.24123,0.0169 -3.31809,0.55703 -0.0667,0.46853 0.0746,0.58217 0.889,0.71524 3.04374,0.49733 6.81364,1.23633 8.58827,1.68353 8.16636,2.05789 16.95876,5.82717 22.4597,9.62841 1.95513,1.35103 1.95224,1.33211 0.75237,4.93074 -1.22845,3.68431 -3.59608,8.15737 -5.89656,11.14008 -0.74738,0.96903 -0.74738,0.96903 -2.30044,0.80527 l -1.55307,-0.16375 -1.24437,1.91065 c -0.6844,1.05086 -1.68055,2.33658 -2.21366,2.85715 l -0.96929,0.94648 0.01,-1.91432 c 0.0169,-3.22827 -0.82459,-5.35405 -2.84003,-7.17488 -2.78613,-2.5171 -6.47491,-2.7826 -10.58861,-0.76212 -1.76996,0.86933 -4.49937,3.19342 -5.4725,4.65982 l -0.40436,0.60933 -3.25159,-0.92971 c -8.44804,-2.41549 -12.98152,-3.06088 -21.53958,-3.0664 -4.831747,-0.003 -7.048395,0.1037 -9.270999,0.44673 -11.414184,1.76163 -20.056998,5.22493 -27.613875,11.06527 -2.715486,2.09866 -5.903595,5.47386 -7.452058,7.88937 -0.621,0.9687 -1.214805,1.76798 -1.31958,1.77618 -0.104775,0.008 -0.1905,-10.4243 -0.1905,-23.18333 z m 29.21,-20.14953 c -3.686769,-0.39865 -7.993842,-2.22681 -10.791027,-4.58032 -1.652377,-1.39029 -4.194973,-4.23948 -4.194973,-4.70082 0,-0.11171 5.715,-0.2031 12.7,-0.2031 h 12.7 l -0.0015,1.3335 c -7.62e-4,0.73343 -0.118156,1.75382 -0.26084,2.26754 -0.342108,1.23172 -1.674922,3.17024 -2.794221,4.06405 -1.593926,1.27291 -4.884588,2.08653 -7.357415,1.81915 z")

# intersections = []
# for i in range(height, 0, -2):
#     newline = Line(complex(0,i), complex(100000,i))
#     intersect = p.intersect(newline)
#     # print(intersect)
#     indiv_sections = []
#     if(intersect):
#         for (T1, seg1, t1), (T2, seg2, t2) in intersect:
#             point = p.point(T1)
#             if point:
#                 point_tuple = (point.real, point.imag)
#                 # print(point_tuple)
#                 indiv_sections.append(point_tuple)
#         # p.append(newline)

#         print(indiv_sections)

#         pairs = list(zip(indiv_sections, indiv_sections[1:] + indiv_sections[:1])) 

#         del pairs[1::2]

#         for pair in pairs:
#             x0 = pair[0][0]
#             x1 = pair[1][0]
#             y  = pair[0][1]
#             # print("( "+ x0 + ", " + y + "), (" + x1 + ", " + y + ")")
#             betweenLine = Line(complex(x0,y), complex(x1,y))
#             p.append(betweenLine)

# disvg(p)



# paths, attributes = svg2paths('uofmlogo.svg')

# newPaths = Path()

# for path in paths:
#     newPath = Path()
#     for seg in path:
#         # print('newobj')
#         # print(seg)
#         newPath.append(seg.translated(20))
#     newPaths.append(newPath)

# paths.append(newPaths)
# disvg(paths)




# t = 0.2
# b = CubicBezier(300+100j, 100+100j, 200+200j, 200+300j)
# n = b.normal(t)
# controlpts = b.bpoints()

# # Let's do a visual check
# mag = 10 # so it's not hard to see the tangent line
# tangent_line = Line(b.point(t), b.point(t) + mag*n)

# normal_line = Line(b.point(t), b.point(t) + mag*n)

# br = b.reversed()

# # Let's also shift b_r over a bit to the right so we can view it next to b
# # The simplest way to do this is br = br.translated(3*mag),  but let's use
# # the .bpoints() instead, which returns a Bezier's control points
# br.start, br.control1, br.control2, br.end = [n*mag + bpt for bpt in br.bpoints()]  #

# tangent_line_r = Line(br.point(t), br.point(t) + mag*br.unit_tangent(t))
# normal_line_r = Line(br.point(t), br.point(t) + mag*br.normal(t))

# newPath = Path()

# newPath.append(b)
# newPath.append(tangent_line)
# newPath.append(normal_line)
# newPath.append(br)
# newPath.append(tangent_line_r)
# newPath.append(normal_line_r)

# disvg(newPath, nodes=[b.point(t)])








# p = parse_path("m 75.650802,227.4614 c -7.490789,-1.3677 -14.686005,-7.78514 -24.395288,-21.75821 -5.225545,-7.52032 -8.863199,-14.72712 -12.564754,-24.89287 -4.912927,-13.49259 -6.917463,-28.62304 -5.432706,-41.00661 1.533173,-12.78741 6.64857,-23.55632 14.918041,-31.40541 6.327569,-6.0059 14.222861,-9.9053 22.783965,-11.25275 6.639748,-1.04505 11.714321,-0.34388 20.481468,2.82997 5.212448,1.88699 9.731612,3.40742 11.404602,3.83698 2.04457,0.52497 3.42533,0.54753 5.15738,0.0843 1.69155,-0.45242 6.40485,-2.0404 11.14474,-3.75481 7.94329,-2.87308 12.41556,-3.8404 17.81024,-3.85223 4.13979,-0.009 8.11174,0.53841 12.37549,1.70583 9.37248,2.5662 15.76683,6.82902 21.70508,14.46979 l 0.74854,0.96315 -1.86748,1.25708 c -9.85607,6.63454 -15.40671,15.19713 -16.89582,26.06402 -0.32251,2.35352 -0.32114,7.54102 0.003,10.25832 1.04167,8.7403 4.61778,16.05222 10.81343,22.10975 3.48474,3.40705 6.35746,5.50275 10.19816,7.43971 l 2.32141,1.17075 -0.5466,1.53688 c -4.09934,11.52623 -9.09609,20.37265 -17.49499,30.97377 -5.36384,6.77025 -10.07681,10.53548 -15.37916,12.2865 -5.11991,1.69078 -10.51673,1.10707 -18.69211,-2.02169 -6.06606,-2.32151 -8.79055,-3.06482 -13.08428,-3.56964 -4.90522,-0.57673 -10.77298,0.30738 -16.826867,2.53534 -1.3232,0.48697 -3.488437,1.28384 -4.811637,1.77081 -5.612169,2.06539 -10.468686,2.84298 -13.873561,2.2213 z M 104.79163,96.05453 c -0.20337,-0.33252 -0.26453,-4.286382 -0.0924,-5.970559 0.82805,-8.099955 4.76487,-16.331496 10.90799,-22.807683 4.75745,-5.015379 11.89427,-9.131718 18.98132,-10.947947 1.89802,-0.486416 5.54983,-1.026507 5.72741,-0.847066 0.0493,0.04982 0.0865,1.505782 0.0827,3.235463 -0.008,3.548507 -0.22579,5.399645 -1.00327,8.522471 -1.64246,6.597063 -5.48747,13.130434 -10.97294,18.644994 -5.50086,5.530039 -11.29938,8.816763 -17.55396,9.949957 -1.67357,0.30321 -5.93175,0.45763 -6.07685,0.22037 z")
# points = []
# for i in range(700, -200, -5):
#     line = Line(complex(0, i), complex(500,i))
#     calc_intersect = p.intersect(line)
#     calc_intersect += Path(line).intersect(p)
#     intersections = []
    
#     if(calc_intersect):
#         for (T1, seg1, t1), (T2, seg2, t2) in calc_intersect:
#             intersections.append(p.point(T1))
            
#         for intersection in intersections:
#             points.append((intersection.real, intersection.imag))
        
    
# print(points)

# disvg(p)





# plt.plot(xs,ys)
# plt.show()



# x = np.arange(0, 1000)
# f = np.arange(0, 1000)
# g = np.sin(np.arange(0, 10, 0.01) * 2) * 1000

# plt.plot(x, f, '-')





"""
This method uses the closest point to a horizontal line, somewhat 
buggy but works for all inputs
"""


# def closest(lst, K): 
#     return lst[min(range(len(lst)), key = lambda i: abs(lst[i]-K))] 
      

# v = writeGcode("tempF/disvg_output.svg.gcode","uploads/disvg_output.svg")

# x, y = zip(*v)

# plt.plot(x,y)

# xvalues = []
# yvalues = []

# val = False

# for i in range(int(max(y)), int(min(y)), -1):
#     val = not val
#     close = closest(y,i)
#     print(str(i) + "," + str(close))
#     if val:
#         xvalues.append(x[y.index(close)])
#         yvalues.append(close)
#         plt.scatter(x[y.index(close)], close)

# plt.plot(xvalues, yvalues, color='red')


# plt.show()









# # idx = np.argwhere(np.diff(np.sign(f - g))).flatten()
# # plt.plot(x[idx], f[idx], 'ro')



# cleanup("noviWildcatOnly.svg")

# os.remove(gcode_file)


# pattern = pyembroidery.read("gcode_th.gcode")


# settings = {
#     "tie_on": True,
#     "tie_off": True
# }

# write(pattern, "converted.pes", settings)







# bounds are in order: min_x, min_y, max_x, max_y
# bounds = pattern.bounds()
# print(bounds[0])

# pattern = EmbPattern()

# pattern.add_thread({
#     "rgb": 0x0000FF,
#     "name": "Blue Test",
#     "catalog": "0033",
#     "brand": "PyEmbroidery Brand Thread"
# })

# pattern.add_thread({
#     "rgb": 0x00FF00,
#     "name": "Green",
#     "catalog": "0034",
#     "brand": "PyEmbroidery Brand Thread"
# })

# test_fractals.generate(pattern)

# write(pattern, "converted.svg", settings)
# write(pattern, "generated.gcode", settings)
# pyembroidery.convert("gcode.gcode", "converted.pes")



# import xml.dom.minidom

# doc = xml.dom.minidom.parse("noviWildcatOnly.svg")

# paths = doc.getElementsByTagName("path")

# for path in paths:
#     print('\n NEW PATH \n')
#     print(path.getAttribute("d"))

# import numpy as np
# from svgpathtools import *


# class HigherOrderBezier:
#     def __init__(self, bpoints):
#         self.bpts = bpoints

#     def bpoints(self):
#         return self.bpts

#     def point(self, t):
#         return bezier_point(self.bpoints(), t)

#     def __repr__(self):
#         return str(self.bpts)


# def random_bezier(degree):
#     if degree <= 3:
#         return bpoints2bezier(polynomial2bezier(np.random.rand(degree + 1)))
#     else:
#         return HigherOrderBezier(np.random.rand(degree + 1))


# def points_in_each_seg_slow(path, tvals):
#     return [seg.poly()(tvals) for seg in path]


# def points_in_each_seg(path, tvals):
#     """Compute seg.point(t) for each seg in path and each t in tvals."""
#     A = np.array([[-1,  3, -3,  1], # transforms cubic bez to standard poly
#                   [ 3, -6,  3,  0],
#                   [-3,  3,  0,  0],
#                   [ 1,  0,  0,  0]])
#     B = [seg.bpoints() for seg in path]
#     return np.dot(B, np.dot(A, np.power(tvals, [[3],[2],[1],[0]])))


# if __name__ == '__main__':
#     num_segs = 1000
#     testpath = Path(*[random_bezier(3) for dummy in range(num_segs)])
#     tvals = np.linspace(0, 1, 10)

#     pts = points_in_each_seg(testpath, tvals)
#     pts_check = points_in_each_seg_slow(testpath, tvals)
#     print((pts - pts_check))

# from svg.path import *
# p = parse_path("m 81.691248,195.96877 c -8.088856,-1.27474 -14.441194,-7.42993 -15.767069,-15.27772 -0.362903,-2.148 -0.365962,-2.6208 -0.02938,-4.53993 0.735535,-4.19385 2.455515,-7.30833 5.957581,-10.78775 9.90686,-9.8428 27.579294,-12.59291 48.52611,-7.5514 3.60269,0.86709 3.87797,0.97426 3.73623,1.4545 -0.0842,0.28514 -0.29127,1.07343 -0.46024,1.75176 l -0.30724,1.23332 -1.397,-0.16785 c -0.76835,-0.0923 -2.3114,-0.27509 -3.429,-0.40615 -1.1176,-0.13107 -3.6322,-0.24366 -5.588,-0.25021 -11.01062,-0.0369 -18.419875,3.88212 -22.442574,11.87057 -1.326653,2.63452 -1.90384,5.15097 -1.910842,8.33099 -0.0094,4.29547 0.9908,7.44714 3.571608,11.25365 0.894435,1.31922 1.592849,2.42689 1.552031,2.46148 -0.65314,0.5535 -9.533554,1.01536 -12.012215,0.62474 z m 21.644632,-8.08474 c -2.4326,-2.60065 -3.773416,-6.79861 -3.24965,-10.17435 0.48819,-3.14647 1.97492,-6.08954 4.18036,-8.27525 3.22444,-3.19561 8.50666,-4.70729 15.28251,-4.37358 3.12105,0.15371 3.92504,0.41455 3.92534,1.27349 2.6e-4,0.99714 1.41427,3.58333 2.48869,4.55206 1.60707,1.44898 2.97943,2.04369 5.02427,2.17727 2.93826,0.19195 6.33915,-1.07718 8.72111,-3.2545 0.61194,-0.55937 1.1458,-0.98387 1.18634,-0.94332 0.0405,0.0405 -0.2664,1.03487 -0.68211,2.20961 l -0.75583,2.13589 1.31909,1.33568 c 1.3191,1.33569 1.3191,1.33569 0.8529,2.04978 -0.81608,1.25003 -5.50767,5.78254 -7.61366,7.35551 -2.31453,1.72873 -5.26298,3.5814 -7.08236,4.45025 -1.22191,0.58352 -1.24458,0.58491 -1.524,0.0936 -0.81932,-1.44068 -3.14501,-3.50656 -4.95407,-4.40065 -1.89408,-0.9361 -1.92919,-0.9426 -5.0954,-0.9426 -2.93492,0 -3.30471,0.0546 -4.65532,0.68749 -2.19232,1.02731 -3.59565,2.13562 -4.80251,3.7929 -0.59622,0.81873 -1.15689,1.48861 -1.24592,1.48861 -0.089,0 -0.68294,-0.55704 -1.31978,-1.23787 z M 55.148248,150.17567 v -23.19823 l 5.837014,-1.82916 5.837015,-1.82917 2.481485,2.19202 c 6.171225,5.45133 12.25632,8.30034 16.832486,7.88087 6.333663,-0.58056 10.474112,-4.46381 11.241466,-10.54315 l 0.291191,-2.30695 h 7.618995 c 4.19044,0 8.59646,0.12756 9.79116,0.28347 4.30075,0.56124 8.0623,1.2762 10.68118,2.03016 2.76179,0.79511 7.36576,2.51837 7.36632,2.7572 1.8e-4,0.0749 -1.45715,0.13617 -3.2385,0.13617 -3.14042,0 -3.24123,0.0169 -3.31809,0.55703 -0.0667,0.46853 0.0746,0.58217 0.889,0.71524 3.04374,0.49733 6.81364,1.23633 8.58827,1.68353 8.16636,2.05789 16.95876,5.82717 22.4597,9.62841 1.95513,1.35103 1.95224,1.33211 0.75237,4.93074 -1.22845,3.68431 -3.59608,8.15737 -5.89656,11.14008 -0.74738,0.96903 -0.74738,0.96903 -2.30044,0.80527 l -1.55307,-0.16375 -1.24437,1.91065 c -0.6844,1.05086 -1.68055,2.33658 -2.21366,2.85715 l -0.96929,0.94648 0.01,-1.91432 c 0.0169,-3.22827 -0.82459,-5.35405 -2.84003,-7.17488 -2.78613,-2.5171 -6.47491,-2.7826 -10.58861,-0.76212 -1.76996,0.86933 -4.49937,3.19342 -5.4725,4.65982 l -0.40436,0.60933 -3.25159,-0.92971 c -8.44804,-2.41549 -12.98152,-3.06088 -21.53958,-3.0664 -4.831747,-0.003 -7.048395,0.1037 -9.270999,0.44673 -11.414184,1.76163 -20.056998,5.22493 -27.613875,11.06527 -2.715486,2.09866 -5.903595,5.47386 -7.452058,7.88937 -0.621,0.9687 -1.214805,1.76798 -1.31958,1.77618 -0.104775,0.008 -0.1905,-10.4243 -0.1905,-23.18333 z m 29.21,-20.14953 c -3.686769,-0.39865 -7.993842,-2.22681 -10.791027,-4.58032 -1.652377,-1.39029 -4.194973,-4.23948 -4.194973,-4.70082 0,-0.11171 5.715,-0.2031 12.7,-0.2031 h 12.7 l -0.0015,1.3335 c -7.62e-4,0.73343 -0.118156,1.75382 -0.26084,2.26754 -0.342108,1.23172 -1.674922,3.17024 -2.794221,4.06405 -1.593926,1.27291 -4.884588,2.08653 -7.357415,1.81915 z")
# print(float(p.point(-3).real))

# # for i in range(0,p.__len__()):
# #     print(float(p.point(i).real))


# good stuff vv
# import svg.path
# from svg.path import parse_path
# from svg.path.path import Line
# from xml.dom import minidom

# # read the SVG file
# doc = minidom.parse('imported/noviWildcatOnly.svg')
# path_strings = [path.getAttribute('d') for path
#                 in doc.getElementsByTagName('path')]
# doc.unlink()

# points = []

# points_string = ""

# # print the line draw commands
# for path_string in path_strings:
#     path = parse_path(path_string)
#     for e in path:
#         if isinstance(e, Line):
#             x0 = round(e.start.real,4)
#             y0 = round(e.start.imag,4)
#             x1 = round(e.end.real,4)
#             y1 = round(e.end.imag,4)
            
#             addition = "G00 X" + str(x0) + " Y" + str(y0) + "\n"

#             addition += "G00 X" + str(x1) + " Y" + str(y1) + "\n"

#             points_string += addition

#             # points.append([x0,y0])
#             # points.append([x1,y1])
#             # print("(%.2f, %.2f) - (%.2f, %.2f)" % (x0, y0, x1, y1))
#     # points_string += "M00"

# points_string += "M30"

# print(points_string)

# print(points)

# from raphaelpy import Raphael

# p = parse_path("m 81.691248,195.96877 c -8.088856,-1.27474 -14.441194,-7.42993 -15.767069,-15.27772 -0.362903,-2.148 -0.365962,-2.6208 -0.02938,-4.53993 0.735535,-4.19385 2.455515,-7.30833 5.957581,-10.78775 9.90686,-9.8428 27.579294,-12.59291 48.52611,-7.5514 3.60269,0.86709 3.87797,0.97426 3.73623,1.4545 -0.0842,0.28514 -0.29127,1.07343 -0.46024,1.75176 l -0.30724,1.23332 -1.397,-0.16785 c -0.76835,-0.0923 -2.3114,-0.27509 -3.429,-0.40615 -1.1176,-0.13107 -3.6322,-0.24366 -5.588,-0.25021 -11.01062,-0.0369 -18.419875,3.88212 -22.442574,11.87057 -1.326653,2.63452 -1.90384,5.15097 -1.910842,8.33099 -0.0094,4.29547 0.9908,7.44714 3.571608,11.25365 0.894435,1.31922 1.592849,2.42689 1.552031,2.46148 -0.65314,0.5535 -9.533554,1.01536 -12.012215,0.62474 z m 21.644632,-8.08474 c -2.4326,-2.60065 -3.773416,-6.79861 -3.24965,-10.17435 0.48819,-3.14647 1.97492,-6.08954 4.18036,-8.27525 3.22444,-3.19561 8.50666,-4.70729 15.28251,-4.37358 3.12105,0.15371 3.92504,0.41455 3.92534,1.27349 2.6e-4,0.99714 1.41427,3.58333 2.48869,4.55206 1.60707,1.44898 2.97943,2.04369 5.02427,2.17727 2.93826,0.19195 6.33915,-1.07718 8.72111,-3.2545 0.61194,-0.55937 1.1458,-0.98387 1.18634,-0.94332 0.0405,0.0405 -0.2664,1.03487 -0.68211,2.20961 l -0.75583,2.13589 1.31909,1.33568 c 1.3191,1.33569 1.3191,1.33569 0.8529,2.04978 -0.81608,1.25003 -5.50767,5.78254 -7.61366,7.35551 -2.31453,1.72873 -5.26298,3.5814 -7.08236,4.45025 -1.22191,0.58352 -1.24458,0.58491 -1.524,0.0936 -0.81932,-1.44068 -3.14501,-3.50656 -4.95407,-4.40065 -1.89408,-0.9361 -1.92919,-0.9426 -5.0954,-0.9426 -2.93492,0 -3.30471,0.0546 -4.65532,0.68749 -2.19232,1.02731 -3.59565,2.13562 -4.80251,3.7929 -0.59622,0.81873 -1.15689,1.48861 -1.24592,1.48861 -0.089,0 -0.68294,-0.55704 -1.31978,-1.23787 z M 55.148248,150.17567 v -23.19823 l 5.837014,-1.82916 5.837015,-1.82917 2.481485,2.19202 c 6.171225,5.45133 12.25632,8.30034 16.832486,7.88087 6.333663,-0.58056 10.474112,-4.46381 11.241466,-10.54315 l 0.291191,-2.30695 h 7.618995 c 4.19044,0 8.59646,0.12756 9.79116,0.28347 4.30075,0.56124 8.0623,1.2762 10.68118,2.03016 2.76179,0.79511 7.36576,2.51837 7.36632,2.7572 1.8e-4,0.0749 -1.45715,0.13617 -3.2385,0.13617 -3.14042,0 -3.24123,0.0169 -3.31809,0.55703 -0.0667,0.46853 0.0746,0.58217 0.889,0.71524 3.04374,0.49733 6.81364,1.23633 8.58827,1.68353 8.16636,2.05789 16.95876,5.82717 22.4597,9.62841 1.95513,1.35103 1.95224,1.33211 0.75237,4.93074 -1.22845,3.68431 -3.59608,8.15737 -5.89656,11.14008 -0.74738,0.96903 -0.74738,0.96903 -2.30044,0.80527 l -1.55307,-0.16375 -1.24437,1.91065 c -0.6844,1.05086 -1.68055,2.33658 -2.21366,2.85715 l -0.96929,0.94648 0.01,-1.91432 c 0.0169,-3.22827 -0.82459,-5.35405 -2.84003,-7.17488 -2.78613,-2.5171 -6.47491,-2.7826 -10.58861,-0.76212 -1.76996,0.86933 -4.49937,3.19342 -5.4725,4.65982 l -0.40436,0.60933 -3.25159,-0.92971 c -8.44804,-2.41549 -12.98152,-3.06088 -21.53958,-3.0664 -4.831747,-0.003 -7.048395,0.1037 -9.270999,0.44673 -11.414184,1.76163 -20.056998,5.22493 -27.613875,11.06527 -2.715486,2.09866 -5.903595,5.47386 -7.452058,7.88937 -0.621,0.9687 -1.214805,1.76798 -1.31958,1.77618 -0.104775,0.008 -0.1905,-10.4243 -0.1905,-23.18333 z m 29.21,-20.14953 c -3.686769,-0.39865 -7.993842,-2.22681 -10.791027,-4.58032 -1.652377,-1.39029 -4.194973,-4.23948 -4.194973,-4.70082 0,-0.11171 5.715,-0.2031 12.7,-0.2031 h 12.7 l -0.0015,1.3335 c -7.62e-4,0.73343 -0.118156,1.75382 -0.26084,2.26754 -0.342108,1.23172 -1.674922,3.17024 -2.794221,4.06405 -1.593926,1.27291 -4.884588,2.08653 -7.357415,1.81915 z")



# # print(p.point(2))

# print(Raphael.getTotalLength(p))

# from svg.path import Path, parse_path






# SAMPLES_PER_PX = 1

# fname = "imported/noviWildcatOnly.svg"
# paths, attributes = svg2paths(fname)

# myPaths = []
# for path,attr in zip(paths, attributes):
#     myPathList = []
#     pathLength = path.length()
#     # pathColour = attr['stroke']
#     numSamples = int(pathLength * SAMPLES_PER_PX)
#         #parametric length = ilength(geometric length)
#     myPathList = [path.ilength(pathLength * i / (numSamples - 1) for i in range(numSamples)]    # myPaths[pathColour] = np.array(myPathList)

# print(myPathList)

# p = parse_path("m 81.691248,195.96877 c -8.088856,-1.27474 -14.441194,-7.42993 -15.767069,-15.27772 -0.362903,-2.148 -0.365962,-2.6208 -0.02938,-4.53993 0.735535,-4.19385 2.455515,-7.30833 5.957581,-10.78775 9.90686,-9.8428 27.579294,-12.59291 48.52611,-7.5514 3.60269,0.86709 3.87797,0.97426 3.73623,1.4545 -0.0842,0.28514 -0.29127,1.07343 -0.46024,1.75176 l -0.30724,1.23332 -1.397,-0.16785 c -0.76835,-0.0923 -2.3114,-0.27509 -3.429,-0.40615 -1.1176,-0.13107 -3.6322,-0.24366 -5.588,-0.25021 -11.01062,-0.0369 -18.419875,3.88212 -22.442574,11.87057 -1.326653,2.63452 -1.90384,5.15097 -1.910842,8.33099 -0.0094,4.29547 0.9908,7.44714 3.571608,11.25365 0.894435,1.31922 1.592849,2.42689 1.552031,2.46148 -0.65314,0.5535 -9.533554,1.01536 -12.012215,0.62474 z m 21.644632,-8.08474 c -2.4326,-2.60065 -3.773416,-6.79861 -3.24965,-10.17435 0.48819,-3.14647 1.97492,-6.08954 4.18036,-8.27525 3.22444,-3.19561 8.50666,-4.70729 15.28251,-4.37358 3.12105,0.15371 3.92504,0.41455 3.92534,1.27349 2.6e-4,0.99714 1.41427,3.58333 2.48869,4.55206 1.60707,1.44898 2.97943,2.04369 5.02427,2.17727 2.93826,0.19195 6.33915,-1.07718 8.72111,-3.2545 0.61194,-0.55937 1.1458,-0.98387 1.18634,-0.94332 0.0405,0.0405 -0.2664,1.03487 -0.68211,2.20961 l -0.75583,2.13589 1.31909,1.33568 c 1.3191,1.33569 1.3191,1.33569 0.8529,2.04978 -0.81608,1.25003 -5.50767,5.78254 -7.61366,7.35551 -2.31453,1.72873 -5.26298,3.5814 -7.08236,4.45025 -1.22191,0.58352 -1.24458,0.58491 -1.524,0.0936 -0.81932,-1.44068 -3.14501,-3.50656 -4.95407,-4.40065 -1.89408,-0.9361 -1.92919,-0.9426 -5.0954,-0.9426 -2.93492,0 -3.30471,0.0546 -4.65532,0.68749 -2.19232,1.02731 -3.59565,2.13562 -4.80251,3.7929 -0.59622,0.81873 -1.15689,1.48861 -1.24592,1.48861 -0.089,0 -0.68294,-0.55704 -1.31978,-1.23787 z M 55.148248,150.17567 v -23.19823 l 5.837014,-1.82916 5.837015,-1.82917 2.481485,2.19202 c 6.171225,5.45133 12.25632,8.30034 16.832486,7.88087 6.333663,-0.58056 10.474112,-4.46381 11.241466,-10.54315 l 0.291191,-2.30695 h 7.618995 c 4.19044,0 8.59646,0.12756 9.79116,0.28347 4.30075,0.56124 8.0623,1.2762 10.68118,2.03016 2.76179,0.79511 7.36576,2.51837 7.36632,2.7572 1.8e-4,0.0749 -1.45715,0.13617 -3.2385,0.13617 -3.14042,0 -3.24123,0.0169 -3.31809,0.55703 -0.0667,0.46853 0.0746,0.58217 0.889,0.71524 3.04374,0.49733 6.81364,1.23633 8.58827,1.68353 8.16636,2.05789 16.95876,5.82717 22.4597,9.62841 1.95513,1.35103 1.95224,1.33211 0.75237,4.93074 -1.22845,3.68431 -3.59608,8.15737 -5.89656,11.14008 -0.74738,0.96903 -0.74738,0.96903 -2.30044,0.80527 l -1.55307,-0.16375 -1.24437,1.91065 c -0.6844,1.05086 -1.68055,2.33658 -2.21366,2.85715 l -0.96929,0.94648 0.01,-1.91432 c 0.0169,-3.22827 -0.82459,-5.35405 -2.84003,-7.17488 -2.78613,-2.5171 -6.47491,-2.7826 -10.58861,-0.76212 -1.76996,0.86933 -4.49937,3.19342 -5.4725,4.65982 l -0.40436,0.60933 -3.25159,-0.92971 c -8.44804,-2.41549 -12.98152,-3.06088 -21.53958,-3.0664 -4.831747,-0.003 -7.048395,0.1037 -9.270999,0.44673 -11.414184,1.76163 -20.056998,5.22493 -27.613875,11.06527 -2.715486,2.09866 -5.903595,5.47386 -7.452058,7.88937 -0.621,0.9687 -1.214805,1.76798 -1.31958,1.77618 -0.104775,0.008 -0.1905,-10.4243 -0.1905,-23.18333 z m 29.21,-20.14953 c -3.686769,-0.39865 -7.993842,-2.22681 -10.791027,-4.58032 -1.652377,-1.39029 -4.194973,-4.23948 -4.194973,-4.70082 0,-0.11171 5.715,-0.2031 12.7,-0.2031 h 12.7 l -0.0015,1.3335 c -7.62e-4,0.73343 -0.118156,1.75382 -0.26084,2.26754 -0.342108,1.23172 -1.674922,3.17024 -2.794221,4.06405 -1.593926,1.27291 -4.884588,2.08653 -7.357415,1.81915 z")

# count_amount = 5
# current_added = p.__getitem__(0).length()
# num_added = 1
# m_length = int(p.length())
# for i in range(0, m_length, count_amount):
#     # print("i: " + str(i) + " cur: " + str(current_added) + " num: " + str(num_added))
#     if(i > current_added):
#         current_added += p.__getitem__(num_added).length()
#         num_added += 1


# print(p.point(-1))


# def offset_curve(path, offset_distance, steps=1000):
#     """Takes in a Path object, `path`, and a distance,
#     `offset_distance`, and outputs an piecewise-linear approximation
#     of the 'parallel' offset curve."""
#     nls = []
#     for seg in path:
#         for k in range(steps):
#             t = k / float(steps)
#             offset_vector = offset_distance * seg.normal(t)
#             nl = Line(seg.point(t), seg.point(t) + offset_vector)
#             nls.append(nl)
#     connect_the_dots = [Line(nls[k].end, nls[k+1].end) for k in range(len(nls)-1)]
#     if path.isclosed():
#         connect_the_dots.append(Line(nls[-1].end, nls[0].end))
#     offset_path = Path(*connect_the_dots)
#     return offset_path

# # Examples:
# path1 = parse_path("m 288,600 c -52,-28 -42,-61 0,-97 ")
# path2 = parse_path("M 151,395 C 407,485 726.17662,160 634,339").translated(300)
# path3 = parse_path("m 117,695 c 237,-7 -103,-146 457,0").translated(500+400j)
# paths = [path1, path2, path3]

# offset_distances = [10*k for k in range(1,51)]
# offset_paths = []
# for path in paths:
#     for distances in offset_distances:
#         offset_paths.append(offset_curve(path, distances))

# # Note: This will take a few moments
# wsvg(paths + offset_paths, 'g'*len(paths) + 'r'*len(offset_paths), filename='offset_curves.svg')


# replace all " " with "," in path

# import js2py

# js2py.translate_file("raphael.no-deps.js", "converted.py")

# from converted import *

# converted.pointsForPath("m,81.691248,195.96877,c,-8.088856,-1.27474,-14.441194,-7.42993,-15.767069,-15.27772,-0.362903,-2.148,-0.365962,-2.6208,-0.02938,-4.53993,0.735535,-4.19385,2.455515,-7.30833,5.957581,-10.78775,9.90686,-9.8428,27.579294,-12.59291,48.52611,-7.5514,3.60269,0.86709,3.87797,0.97426,3.73623,1.4545,-0.0842,0.28514,-0.29127,1.07343,-0.46024,1.75176,l,-0.30724,1.23332,-1.397,-0.16785,c,-0.76835,-0.0923,-2.3114,-0.27509,-3.429,-0.40615,-1.1176,-0.13107,-3.6322,-0.24366,-5.588,-0.25021,-11.01062,-0.0369,-18.419875,3.88212,-22.442574,11.87057,-1.326653,2.63452,-1.90384,5.15097,-1.910842,8.33099,-0.0094,4.29547,0.9908,7.44714,3.571608,11.25365,0.894435,1.31922,1.592849,2.42689,1.552031,2.46148,-0.65314,0.5535,-9.533554,1.01536,-12.012215,0.62474,z,m,21.644632,-8.08474,c,-2.4326,-2.60065,-3.773416,-6.79861,-3.24965,-10.17435,0.48819,-3.14647,1.97492,-6.08954,4.18036,-8.27525,3.22444,-3.19561,8.50666,-4.70729,15.28251,-4.37358,3.12105,0.15371,3.92504,0.41455,3.92534,1.27349,2.6e-4,0.99714,1.41427,3.58333,2.48869,4.55206,1.60707,1.44898,2.97943,2.04369,5.02427,2.17727,2.93826,0.19195,6.33915,-1.07718,8.72111,-3.2545,0.61194,-0.55937,1.1458,-0.98387,1.18634,-0.94332,0.0405,0.0405,-0.2664,1.03487,-0.68211,2.20961,l,-0.75583,2.13589,1.31909,1.33568,c,1.3191,1.33569,1.3191,1.33569,0.8529,2.04978,-0.81608,1.25003,-5.50767,5.78254,-7.61366,7.35551,-2.31453,1.72873,-5.26298,3.5814,-7.08236,4.45025,-1.22191,0.58352,-1.24458,0.58491,-1.524,0.0936,-0.81932,-1.44068,-3.14501,-3.50656,-4.95407,-4.40065,-1.89408,-0.9361,-1.92919,-0.9426,-5.0954,-0.9426,-2.93492,0,-3.30471,0.0546,-4.65532,0.68749,-2.19232,1.02731,-3.59565,2.13562,-4.80251,3.7929,-0.59622,0.81873,-1.15689,1.48861,-1.24592,1.48861,-0.089,0,-0.68294,-0.55704,-1.31978,-1.23787,z,M,55.148248,150.17567,v,-23.19823,l,5.837014,-1.82916,5.837015,-1.82917,2.481485,2.19202,c,6.171225,5.45133,12.25632,8.30034,16.832486,7.88087,6.333663,-0.58056,10.474112,-4.46381,11.241466,-10.54315,l,0.291191,-2.30695,h,7.618995,c,4.19044,0,8.59646,0.12756,9.79116,0.28347,4.30075,0.56124,8.0623,1.2762,10.68118,2.03016,2.76179,0.79511,7.36576,2.51837,7.36632,2.7572,1.8e-4,0.0749,-1.45715,0.13617,-3.2385,0.13617,-3.14042,0,-3.24123,0.0169,-3.31809,0.55703,-0.0667,0.46853,0.0746,0.58217,0.889,0.71524,3.04374,0.49733,6.81364,1.23633,8.58827,1.68353,8.16636,2.05789,16.95876,5.82717,22.4597,9.62841,1.95513,1.35103,1.95224,1.33211,0.75237,4.93074,-1.22845,3.68431,-3.59608,8.15737,-5.89656,11.14008,-0.74738,0.96903,-0.74738,0.96903,-2.30044,0.80527,l,-1.55307,-0.16375,-1.24437,1.91065,c,-0.6844,1.05086,-1.68055,2.33658,-2.21366,2.85715,l,-0.96929,0.94648,0.01,-1.91432,c,0.0169,-3.22827,-0.82459,-5.35405,-2.84003,-7.17488,-2.78613,-2.5171,-6.47491,-2.7826,-10.58861,-0.76212,-1.76996,0.86933,-4.49937,3.19342,-5.4725,4.65982,l,-0.40436,0.60933,-3.25159,-0.92971,c,-8.44804,-2.41549,-12.98152,-3.06088,-21.53958,-3.0664,-4.831747,-0.003,-7.048395,0.1037,-9.270999,0.44673,-11.414184,1.76163,-20.056998,5.22493,-27.613875,11.06527,-2.715486,2.09866,-5.903595,5.47386,-7.452058,7.88937,-0.621,0.9687,-1.214805,1.76798,-1.31958,1.77618,-0.104775,0.008,-0.1905,-10.4243,-0.1905,-23.18333,z,m,29.21,-20.14953,c,-3.686769,-0.39865,-7.993842,-2.22681,-10.791027,-4.58032,-1.652377,-1.39029,-4.194973,-4.23948,-4.194973,-4.70082,0,-0.11171,5.715,-0.2031,12.7,-0.2031,h,12.7,l,-0.0015,1.3335,c,-7.62e-4,0.73343,-0.118156,1.75382,-0.26084,2.26754,-0.342108,1.23172,-1.674922,3.17024,-2.794221,4.06405,-1.593926,1.27291,-4.884588,2.08653,-7.357415,1.81915,z")
